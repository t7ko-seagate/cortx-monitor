#!/bin/bash -e

####################################################################################
# Performs automated integration tests on SSPL-LL by performing the following
#	1) Pulls the latest packages from the git repo and installs prerequisites
#	2) Uninstalls any previous SSPL-LL installations to avoid interference
#	3) Runs a series of tests by injecting actuator messages into RabbitMQ
#	4) Confirms the proper actuator JSON responses are generated by SSPL-LL
#	5) Manipulates the file system in /var/run/diskmonitor/drive_manager.json
#	6) Confirms the proper sensor JSON responses are generated by SSPL-LL
#	7) Uses Mock objects to inject events simulating external sensors
#
# To apply tests on code perform the following
#	Pull the code to be tested from master or branch
#	1) git clone <-b branch> ssh://[uid]@es-gerrit.xyus.xyratex.com:29418/sspl
#	Change to the sspl directory
#	2) cd sspl
#	Execute this test script
#	3) ./run_tests.sh
#	It will exit 0 upon success and 1 if any tests failed or had errors
#
#
####################################################################################

TOP_DIR=$PWD

vm_name=sspl-test
[[ $EUID -ne 0 ]] && sudo=sudo

# installing lxc for tests
$sudo yum -y install epel-release
$sudo yum -y install lxc lxc-templates lxc-extra bridge-utils libvirt-daemon
$sudo systemctl start libvirtd
$sudo systemctl start lxc
[[ $($sudo lxc-ls) =~ "$vm_name" ]]  &&  $sudo lxc-stop -n $vm_name && $sudo lxc-destroy -n $vm_name
$sudo bash  -c  "lxc-create -n $vm_name -t centos  -- -R 7"
echo Xyratex | $sudo chroot /var/lib/lxc/$vm_name/rootfs passwd --stdin  -u root
$sudo bash  -c  "lxc-start -n $vm_name"
# we need to wait till yum will be functioning properly, this is the easiest way
$sudo lxc-attach -n $vm_name  -- bash -c "while :; do yum install -y epel-release && break; done"
pushd $TOP_DIR; tar cf - . |  $sudo lxc-attach -n $vm_name -- bash -c 'tar -xf  - -C  $HOME/'; popd

# Copy over sudoers files
$sudo lxc-attach -n $vm_name -- 'cp $HOME/installation/deps/00aliases /etc/sudoers.d/'

# Copy over dcs-collector configuration file
$sudo lxc-attach -n $vm_name --  'cp $HOME/installation/deps/dcs_collector.conf /etc'

# Make sure rabbitmq is started before we initialize it
$sudo lxc-attach -n $vm_name  -- yum y install rabbitmq-server
$sudo lxc-attach -n $vm_name  -- systemctl start rabbitmq-server -l

# Copy startup and config files
$sudo lxc-attach -n $vm_name  -- 'cp $HOME/installation/deps/sspl-ll-test.service /etc/systemd/system/sspl-ll.service'
$sudo lxc-attach -n $vm_name  -- 'cp $HOME/installation/deps/sspl_ll-test.conf /etc/sspl_ll.conf'

# Update sspl-ll.service with current path
$sudo lxc-attach -n $vm_name  --  'sed -i "s|^ExecStart=.*|ExecStart=/root/low-level/framework/sspl_ll_d -c /etc/sspl_ll.conf|g" /etc/systemd/system/sspl-ll.service' 

# Have systemd reload the unit file
$sudo lxc-attach -n $vm_name  -- "systemctl daemon-reload"

# Initialize rabbitmq queues and exchanges
$sudo lxc-attach -n $vm_name  -- 'chmod +x /root/low-level/framework/sspl_ll_rabbitmq_reinit_CS_A'
$sudo lxc-attach -n $vm_name  -- 'low-level/framework/sspl_ll_rabbitmq_reinit_CS_A'

$sudo lxc-attach -n $vm_name  -- 'chmod +x /root/installation/deps/install_deps.sh'
$sudo lxc-attach -n $vm_name  -- '/root/installation/deps/install_deps.sh'
# Start openhpid
$sudo lxc-attach -n $vm_name  -- 'yum -y install openhpi'
$sudo lxc-attach -n $vm_name  -- 'systemctl start openhpid -l'

$sudo lxc-attach -n $vm_name  -- systemctl start crond
$sudo lxc-attach -n $vm_name  -- systemctl start httpd

# Execute tests
$sudo lxc-attach -n $vm_name --  bash -c "cd /root/low-level/tests/automated; chmod +x run_sspl-ll_tests.sh; ./run_sspl-ll_tests.sh"
retcode=$?
$sudo lxc-stop -n $vm_name && $sudo lxc-destroy -n $vm_name
exit $retcode
